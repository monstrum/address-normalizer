<?xml version="1.0" encoding="UTF-8"?>
<project default="build" basedir=".">

    <description>
A standard build file for zend framework 2 projects. It provides a series of tools
to easily run against the project.
    </description>

    <!-- define APPLICATION_ENV for all tasks-->
    <property name="application.env" value="testing"/>

    <!-- build folder -->
    <property name="dir.build" value="data/build"/>
    <property name="dir.build.coverage" value="${dir.build}/coverage"/>
    <property name="dir.build.pdepend" value="${dir.build}/pdepend"/>
    <property name="dir.build.logs" value="${dir.build}/logs"/>

    <!-- miscellaneous folder-->
    <property name="dir.module" value="src"/>
    <property name="dir.test" value="test"/>
    <property name="dir.test.unit" value="test/unit"/>

    <!-- ========================================================================================================= -->

    <target name="apidoc" description="Generate API documentation. Apidoc installation required.">
        <exec executable="apidoc" dir="./doc" failonerror="true">
            <arg value="-i"/>
            <arg value="common"/>
            <arg value="-i"/>
            <arg value="history"/>
            <arg value="-i"/>
            <arg value="../module"/>
            <arg value="-o"/>
            <arg value="../public/apidoc"/>
        </exec>
    </target>

    <!-- ========================================================================================================= -->

    <target name="classmap" description="Update all classmaps inside the module dir">
        <exec executable="./ucm.php" failonerror="true"/>
    </target>

    <!-- ========================================================================================================= -->

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l"/>
            <fileset dir="${basedir}/${dir.module}">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="lint-test" description="Perform syntax check of test files">
        <apply executable="php" failonerror="true">
            <arg value="-l"/>
            <fileset dir="${basedir}/${dir.test.unit}">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <!-- ========================================================================================================= -->

    <target name="clean-pdepend" description="Clean up artifact directories and files for PHP_Depend">
        <delete file="${basedir}/${dir.build.logs}/jdepend.xml"/>
        <delete file="${basedir}/${dir.build.pdepend}/dependencies.svg"/>
        <delete file="${basedir}/${dir.build.pdepend}/overview-pyramid.svg"/>
    </target>

    <target name="pdepend" depends="clean-pdepend,prepare" description="Calculate software metrics using PHP_Depend">
        <exec executable="./bin/pdepend">
            <arg value="--jdepend-xml=${basedir}/${dir.build.logs}/jdepend.xml"/>
            <arg value="--jdepend-chart=${basedir}/${dir.build.pdepend}/dependencies.svg"/>
            <arg value="--overview-pyramid=${basedir}/${dir.build.pdepend}/overview-pyramid.svg"/>
            <arg path="${basedir}/${dir.module}"/>
        </exec>
    </target>

    <!-- ========================================================================================================= -->

    <target name="clean-phpcpd" description="Clean up artifact directories and files for PHPCPD">
        <delete file="${basedir}/${dir.build.logs}/pmd-cpd.xml"/>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="./bin/phpcpd">
            <arg path="${basedir}/${dir.module}"/>
        </exec>
    </target>

    <target name="phpcpd-ci" depends="clean-phpcpd,prepare"
            description="Find duplicate code using PHPCPD creating a log file for the coninuous integration server">
        <exec executable="./bin/phpcpd">
            <arg value="--log-pmd"/>
            <arg value="${basedir}/${dir.build.logs}/pmd-cpd.xml"/>
            <arg path="${basedir}/${dir.module}"/>
        </exec>
    </target>

    <!-- ========================================================================================================= -->

    <target name="clean-phpcs" description="Clean up artifact directories and files for PHP CodeSniffer">
        <delete file="${basedir}/${dir.build.logs}/checkstyle.xml"/>
    </target>

    <target name="phpcs"
            description="Generate a checkstyle.xml and print a full report to stdout. Using PSR-2 as coding standard">
        <exec executable="./bin/phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-checkstyle=${basedir}/${dir.build.logs}/checkstyle.xml"/>
            <arg value="--extensions=php"/>
            <arg value="--encoding=UTF-8"/>
            <arg value="--ignore=autoload_classmap*"/>
            <arg value="--standard=PSR2"/>
            <arg value="${basedir}/${dir.module}"/>
        </exec>
    </target>

    <target name="phpcs-ci" depends="clean-phpcs,prepare"
            description="Find coding standard violations creating a log file for the continuous integration server">
        <exec executable="./bin/phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-checkstyle=${basedir}/${dir.build.logs}/checkstyle.xml"/>
            <arg value="--extensions=php"/>
            <arg value="--encoding=UTF-8"/>
            <arg value="--ignore=autoload_classmap*"/>
            <arg value="--standard=PSR2"/>
            <arg value="${basedir}/${dir.module}"/>
        </exec>
    </target>

    <target name="phpcs-test"
            description="Generate and print a full report for phpunit test files. Using PSR-2 as coding standard">
        <exec executable="./bin/phpcs">
            <arg value="--report=full"/>
            <arg value="--report-width=120"/>
            <arg value="--extensions=php"/>
            <arg value="--encoding=UTF-8"/>
            <arg value="--standard=PSR2"/>
            <arg value="${basedir}/${dir.test.unit}"/>
        </exec>
    </target>

    <!-- ========================================================================================================= -->

    <target name="clean-phploc" description="Clean up artifact directories and files for PHPLOC">
        <delete file="${basedir}/${dir.build.logs}/phploc.csv"/>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="./bin/phploc">
            <arg value="--ansi"/>
            <arg value="--no-interaction"/>
            <arg path="${basedir}/${dir.module}"/>
        </exec>
    </target>

    <target name="phploc-ci" depends="clean-phploc,prepare"
            description="Measure project size using PHPLOC for the continous integration server">
        <exec executable="./bin/phploc">
            <arg value="--no-interaction"/>
            <arg value="--log-csv"/>
            <arg value="${basedir}/${dir.build.logs}/phploc.csv"/>
            <arg path="${basedir}/${dir.module}"/>
        </exec>
    </target>

    <!-- ========================================================================================================= -->

    <target name="clean-phpmd" description="Clean up artifact directories and files for PHPMD">
        <delete file="${basedir}/${dir.build.logs}/pmd.xml"/>
    </target>

    <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output">
        <exec executable="./bin/phpmd">
            <arg path="${basedir}/${dir.module}"/>
            <arg value="xml"/>
            <arg value="codesize,controversial,design,unusedcode"/>
            <arg value="--reportfile"/>
            <arg value="${basedir}/${dir.build.logs}/pmd.xml"/>
        </exec>
    </target>

    <target name="phpmd-ci" depends="clean-phpmd,prepare"
            description="Perform project mess detection using PHPMD creating a log file for continuous integration server">
        <exec executable="./bin/phpmd">
            <arg path="${basedir}/${dir.module}"/>
            <arg value="xml"/>
            <arg value="codesize,controversial,design,unusedcode"/>
            <arg value="--reportfile"/>
            <arg value="${basedir}/${dir.build.logs}/pmd.xml"/>
        </exec>
    </target>

    <!-- ========================================================================================================= -->

    <target name="clean-phpunit" description="Clean up artifact directories and files for PHPUnit">
        <delete includeemptydirs="true">
            <fileset dir="${basedir}/${dir.build.coverage}" includes="**/*" erroronmissingdir="false"/>
        </delete>
        <delete file="${basedir}/${dir.build.logs}/clover.xml"/>
        <delete file="${basedir}/${dir.build.logs}/junit.xml"/>
    </target>

    <target name="phpunit" description="Run unit tests using PHPUnit and print a report to stdout">
        <exec executable="./bin/phpunit" failonerror="true">
            <arg line="--configuration '${basedir}/${dir.test}/phpunit.xml' --colors=always --coverage-html='${basedir}/${dir.build.coverage}'"/>
        </exec>
    </target>

    <target name="phpunit-ci" depends="clean-phpunit,prepare"
            description="Run unit tests using PHPUnit creating a log file for the continuous integration server">
        <exec executable="./bin/phpunit" failonerror="true">
            <arg line="--configuration '${basedir}/${dir.test}/phpunit.CI.xml' -d zend.enable_gc=0"/>
        </exec>
    </target>

    <!-- ========================================================================================================= -->

    <target name="clean"
            depends="clean-pdepend,clean-phpcpd,clean-phpcs,clean-phploc,clean-phpmd,clean-phpunit"
            description="Clean up artifact directories">
        <delete dir="${basedir}/${dir.build.coverage}"/>
        <delete dir="${basedir}/${dir.build.logs}"/>
        <delete dir="${basedir}/${dir.build.pdepend}"/>
        <delete dir="${basedir}/${dir.build}"/>
    </target>

    <target name="prepare" description="Create artifact directories">
        <mkdir dir="${basedir}/${dir.build}"/>
        <mkdir dir="${basedir}/${dir.build.coverage}"/>
        <mkdir dir="${basedir}/${dir.build.logs}"/>
        <mkdir dir="${basedir}/${dir.build.pdepend}"/>
    </target>

    <target name="update" description="Install the package dependencies">
        <exec executable="composer" dir="${basedir}">
            <arg line="update --optimize-autoloader --no-interaction"/>
        </exec>
    </target>

    <target name="build-parallel" description="Run PHP tools in parallel">
        <parallel threadCount="4">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phpdoc-ci"/>
            <antcall target="phploc-ci"/>
        </parallel>
    </target>

    <target
            name="build"
            depends="clean,prepare,lint,update,pdepend,phpcpd,phpcs,phploc,phpmd,phpunit"
            />
    <target
            name="build-ci"
            depends="clean,prepare,lint,update,build-parallel,phpunit-ci"
            />
</project>
